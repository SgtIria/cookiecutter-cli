import shutil

from setuptools import setup, find_packages, Command


{%- set license_classifiers = {
    "Mozilla Public License 2.0": "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Apache Software License 2.0": "License :: OSI Approved :: Apache Software License",
    "MIT": "License :: OSI Approved :: MIT License",
    "GNU GPL v3.0": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "GNU LGPL v3.0": "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "GNU AGPL v3.0": "License :: OSI Approved :: GNU Affero General Public License v3",
    "BSD": "License :: OSI Approved :: BSD License",
} %}


class CleanCommand(Command):
    """Custom clean command to remove build, dist and egg-info folders."""
    user_options = []
    description = (
        "Custom clean command to remove build, dist and egg-info folders."
    )

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        clean()

    @staticmethod
    def run():
        """Clean directories generated by the install command."""
        print("Cleaning build, dist and egg-info directories.")
        try:
            shutil.rmtree("build")
        except FileNotFoundError:
            pass

        try:
            shutil.rmtree("dist")
        except FileNotFoundError:
            pass

        try:
            shutil.rmtree("{{cookiecutter.project_slug}}.egg-info")
        except FileNotFoundError:
            pass

        print("Cleaning done !")


def require(*requirements_files):
    """Read requierements file to extract"""
    deps = []
    for req_file in requirements_files:
        with open(req_file, "r") as req_f:
            for line in req_f:
                if line.startswith("#") or line.startswith("-r"):
                    continue
                else:
                    deps.append(line.strip())

    return deps


with open('README.rst') as readme_file:
    README = readme_file.read()


setup(
    name='{{cookiecutter.project_slug}}',
    version='{{cookiecutter.version}}',
    author_email='{{cookiecutter.email}}',
    description='{{cookiecutter.description}}',
    long_description=README,
    author='{{cookiecutter.author}}',
    url='https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}',
    packages=find_packages(exclude=['tests']),
    install_requires=require("requirements/base.txt"),
    keywords=["cli"],
    {%- if cookiecutter.license in license_classifiers %}
    license="{{ cookiecutter.license }}",
    {%- endif %}
    include_package_data=True,
    zip_safe=False,
    entry_points={
        'console_scripts': [
            '{{cookiecutter.command_name}} = {{cookiecutter.project_slug}}.cli:{{cookiecutter.command_name}}',
        ],
    },
    classifiers=[
        'Environment :: Console',
        'Natural Language :: English',
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Programming Language :: Python :: 3 :: Only',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        {%- if cookiecutter.license in license_classifiers %}
        '{{ license_classifiers[cookiecutter.license] }}',
        {%- endif %}
        {%- if cookiecutter.use_travis == 'y' %}
        "Operating System :: POSIX :: Linux",
        {%- endif %}
        {%- if cookiecutter.use_appveyor == 'y' %}
        "Operating System :: Microsoft",
        {%- endif %}
    ],
    cmdclass={
        'clean': CleanCommand,
    },
    test_suite="tests",
    setup_requires=["pytest-runner==2.9"],
    tests_require=require("requirements/base.txt", "requirements/dev.txt")
)
